{"ast":null,"code":"import { PROJECT_LIST_REQUEST, PROJECT_LIST_SUCCESS, PROJECT_LIST_FAIL, PROJECT_DETAILS_REQUEST, PROJECT_DETAILS_SUCCESS, PROJECT_DETAILS_FAIL, PROJECT_SAVE_REQUEST, PROJECT_SAVE_SUCCESS, PROJECT_SAVE_FAIL, PROJECT_DELETE_SUCCESS, PROJECT_DELETE_FAIL, PROJECT_DELETE_REQUEST, PROJECT_REVIEW_SAVE_REQUEST, PROJECT_REVIEW_SAVE_FAIL, PROJECT_REVIEW_SAVE_SUCCESS } from '../src/constants/projectConstant';\nimport axios from 'axios';\n\nconst listProjects = function () {\n  let category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let searchKeyword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let sortOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PROJECT_LIST_REQUEST\n      });\n      const {\n        data\n      } = await axios.get('/api/donation');\n      dispatch({\n        type: PROJECT_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: PROJECT_LIST_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n}; // const saveProject = (product) => async (dispatch, getState) => {\n//   try {\n//     dispatch({ type: PROJECT_SAVE_REQUEST, payload: product })\n//     const {\n//       userSignin: { userInfo },\n//     } = getState()\n//     if (!product._id) {\n//       const { data } = await axios.post('/api/products', product, {\n//         headers: {\n//           Authorization: 'Bearer ' + userInfo.token,\n//         },\n//       })\n//       dispatch({ type: PROJECT_SAVE_SUCCESS, payload: data })\n//     } else {\n//       const { data } = await axios.put(\n//         '/api/products/' + product._id,\n//         product,\n//         {\n//           headers: {\n//             Authorization: 'Bearer ' + userInfo.token,\n//           },\n//         }\n//       )\n//       dispatch({ type: PROJECT_SAVE_SUCCESS, payload: data })\n//     }\n//   } catch (error) {\n//     dispatch({ type: PROJECT_SAVE_FAIL, payload: error.message })\n//   }\n// }\n// const detailsProject = (productId) => async (dispatch) => {\n//   try {\n//     dispatch({ type: PROJECT_DETAILS_REQUEST, payload: productId })\n//     const { data } = await axios.get('/api/products/' + productId)\n//     dispatch({ type: PROJECT_DETAILS_SUCCESS, payload: data })\n//   } catch (error) {\n//     dispatch({ type: PROJECT_DETAILS_FAIL, payload: error.message })\n//   }\n// }\n// const deleteProject = (productId) => async (dispatch, getState) => {\n//   try {\n//     const {\n//       userSignin: { userInfo },\n//     } = getState()\n//     dispatch({ type: PROJECT_DELETE_REQUEST, payload: productId })\n//     const { data } = await axios.delete('/api/products/' + productId, {\n//       headers: {\n//         Authorization: 'Bearer ' + userInfo.token,\n//       },\n//     })\n//     dispatch({ type: PROJECT_DELETE_SUCCESS, payload: data, success: true })\n//   } catch (error) {\n//     dispatch({ type: PROJECT_DELETE_FAIL, payload: error.message })\n//   }\n// }\n// const saveProjectReview = (productId, review) => async (dispatch, getState) => {\n//   try {\n//     const {\n//       userSignin: {\n//         userInfo: { token },\n//       },\n//     } = getState()\n//     dispatch({ type: PROJECT_REVIEW_SAVE_REQUEST, payload: review })\n//     const { data } = await axios.post(\n//       `/api/products/${productId}/reviews`,\n//       review,\n//       {\n//         headers: {\n//           Authorization: 'Bearer ' + token,\n//         },\n//       }\n//     )\n//     dispatch({ type: PROJECT_REVIEW_SAVE_SUCCESS, payload: data })\n//   } catch (error) {\n//     // report error\n//     dispatch({ type: PROJECT_REVIEW_SAVE_FAIL, payload: error.message })\n//   }\n// }\n\n\nexport { listProjects // detailsProject,\n// saveProject,\n// deleteProject,\n// saveProjectReview,\n};","map":{"version":3,"names":["PROJECT_LIST_REQUEST","PROJECT_LIST_SUCCESS","PROJECT_LIST_FAIL","PROJECT_DETAILS_REQUEST","PROJECT_DETAILS_SUCCESS","PROJECT_DETAILS_FAIL","PROJECT_SAVE_REQUEST","PROJECT_SAVE_SUCCESS","PROJECT_SAVE_FAIL","PROJECT_DELETE_SUCCESS","PROJECT_DELETE_FAIL","PROJECT_DELETE_REQUEST","PROJECT_REVIEW_SAVE_REQUEST","PROJECT_REVIEW_SAVE_FAIL","PROJECT_REVIEW_SAVE_SUCCESS","axios","listProjects","category","searchKeyword","sortOrder","dispatch","type","data","get","payload","error","response","message"],"sources":["C:/Final year/charity/frontend/src/actions/projectAction.js"],"sourcesContent":["import {\r\n  PROJECT_LIST_REQUEST,\r\n  PROJECT_LIST_SUCCESS,\r\n  PROJECT_LIST_FAIL,\r\n  PROJECT_DETAILS_REQUEST,\r\n  PROJECT_DETAILS_SUCCESS,\r\n  PROJECT_DETAILS_FAIL,\r\n  PROJECT_SAVE_REQUEST,\r\n  PROJECT_SAVE_SUCCESS,\r\n  PROJECT_SAVE_FAIL,\r\n  PROJECT_DELETE_SUCCESS,\r\n  PROJECT_DELETE_FAIL,\r\n  PROJECT_DELETE_REQUEST,\r\n  PROJECT_REVIEW_SAVE_REQUEST,\r\n  PROJECT_REVIEW_SAVE_FAIL,\r\n  PROJECT_REVIEW_SAVE_SUCCESS,\r\n} from '../src/constants/projectConstant'\r\nimport axios from 'axios'\r\n\r\nconst listProjects =\r\n  (category = '', searchKeyword = '', sortOrder = '') =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PROJECT_LIST_REQUEST })\r\n      const { data } = await axios.get('/api/donation')\r\n      dispatch({ type: PROJECT_LIST_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      dispatch({\r\n        type: PROJECT_LIST_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      })\r\n    }\r\n  }\r\n\r\n// const saveProject = (product) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({ type: PROJECT_SAVE_REQUEST, payload: product })\r\n//     const {\r\n//       userSignin: { userInfo },\r\n//     } = getState()\r\n//     if (!product._id) {\r\n//       const { data } = await axios.post('/api/products', product, {\r\n//         headers: {\r\n//           Authorization: 'Bearer ' + userInfo.token,\r\n//         },\r\n//       })\r\n//       dispatch({ type: PROJECT_SAVE_SUCCESS, payload: data })\r\n//     } else {\r\n//       const { data } = await axios.put(\r\n//         '/api/products/' + product._id,\r\n//         product,\r\n//         {\r\n//           headers: {\r\n//             Authorization: 'Bearer ' + userInfo.token,\r\n//           },\r\n//         }\r\n//       )\r\n//       dispatch({ type: PROJECT_SAVE_SUCCESS, payload: data })\r\n//     }\r\n//   } catch (error) {\r\n//     dispatch({ type: PROJECT_SAVE_FAIL, payload: error.message })\r\n//   }\r\n// }\r\n\r\n// const detailsProject = (productId) => async (dispatch) => {\r\n//   try {\r\n//     dispatch({ type: PROJECT_DETAILS_REQUEST, payload: productId })\r\n//     const { data } = await axios.get('/api/products/' + productId)\r\n//     dispatch({ type: PROJECT_DETAILS_SUCCESS, payload: data })\r\n//   } catch (error) {\r\n//     dispatch({ type: PROJECT_DETAILS_FAIL, payload: error.message })\r\n//   }\r\n// }\r\n\r\n// const deleteProject = (productId) => async (dispatch, getState) => {\r\n//   try {\r\n//     const {\r\n//       userSignin: { userInfo },\r\n//     } = getState()\r\n//     dispatch({ type: PROJECT_DELETE_REQUEST, payload: productId })\r\n//     const { data } = await axios.delete('/api/products/' + productId, {\r\n//       headers: {\r\n//         Authorization: 'Bearer ' + userInfo.token,\r\n//       },\r\n//     })\r\n//     dispatch({ type: PROJECT_DELETE_SUCCESS, payload: data, success: true })\r\n//   } catch (error) {\r\n//     dispatch({ type: PROJECT_DELETE_FAIL, payload: error.message })\r\n//   }\r\n// }\r\n\r\n// const saveProjectReview = (productId, review) => async (dispatch, getState) => {\r\n//   try {\r\n//     const {\r\n//       userSignin: {\r\n//         userInfo: { token },\r\n//       },\r\n//     } = getState()\r\n//     dispatch({ type: PROJECT_REVIEW_SAVE_REQUEST, payload: review })\r\n//     const { data } = await axios.post(\r\n//       `/api/products/${productId}/reviews`,\r\n//       review,\r\n//       {\r\n//         headers: {\r\n//           Authorization: 'Bearer ' + token,\r\n//         },\r\n//       }\r\n//     )\r\n//     dispatch({ type: PROJECT_REVIEW_SAVE_SUCCESS, payload: data })\r\n//   } catch (error) {\r\n//     // report error\r\n//     dispatch({ type: PROJECT_REVIEW_SAVE_FAIL, payload: error.message })\r\n//   }\r\n// }\r\n\r\nexport {\r\n  listProjects,\r\n  // detailsProject,\r\n  // saveProject,\r\n  // deleteProject,\r\n  // saveProjectReview,\r\n}\r\n"],"mappings":"AAAA,SACEA,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,uBAJF,EAKEC,uBALF,EAMEC,oBANF,EAOEC,oBAPF,EAQEC,oBARF,EASEC,iBATF,EAUEC,sBAVF,EAWEC,mBAXF,EAYEC,sBAZF,EAaEC,2BAbF,EAcEC,wBAdF,EAeEC,2BAfF,QAgBO,kCAhBP;AAiBA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAChB;EAAA,IAACC,QAAD,uEAAY,EAAZ;EAAA,IAAgBC,aAAhB,uEAAgC,EAAhC;EAAA,IAAoCC,SAApC,uEAAgD,EAAhD;EAAA,OACA,MAAOC,QAAP,IAAoB;IAClB,IAAI;MACFA,QAAQ,CAAC;QAAEC,IAAI,EAAErB;MAAR,CAAD,CAAR;MACA,MAAM;QAAEsB;MAAF,IAAW,MAAMP,KAAK,CAACQ,GAAN,CAAU,eAAV,CAAvB;MACAH,QAAQ,CAAC;QAAEC,IAAI,EAAEpB,oBAAR;QAA8BuB,OAAO,EAAEF;MAAvC,CAAD,CAAR;IACD,CAJD,CAIE,OAAOG,KAAP,EAAc;MACdL,QAAQ,CAAC;QACPC,IAAI,EAAEnB,iBADC;QAEPsB,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OADxB,GAEIF,KAAK,CAACE;MALL,CAAD,CAAR;IAOD;EACF,CAfD;AAAA,CADF,C,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACEX,YADF,CAEE;AACA;AACA;AACA;AALF"},"metadata":{},"sourceType":"module"}