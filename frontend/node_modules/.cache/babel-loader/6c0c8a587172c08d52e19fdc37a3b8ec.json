{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, // USER_LIST_FAIL,\n// USER_LIST_REQUEST,\n// USER_LIST_SUCCESS,\nUSER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL // USER_UPDATE_REQUEST,\n// USER_UPDATE_FAIL,\n// USER_UPDATE_SUCCESS,\n} from '../constants/userConstant';\n\nconst detailsUser = user => async (dispatch, getState) => {\n  try {\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application.json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n      payload: user\n    });\n    const {\n      data\n    } = await axios.get(`/api/users/${user}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n      payload: user\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application.json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    console.log(data);\n    console.log(userInfo);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('user', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // const updateUser = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({ type: USER_UPDATE_REQUEST, payload: user })\n//     const {\n//       userSignin: { userInfo },\n//     } = getState()\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, {\n//       headers: { Authorization: `bearer ${userInfo.token}` },\n//     })\n//     dispatch({ type: USER_UPDATE_SUCCESS, payload: data.user })\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data.user })\n//   } catch (error) {\n//     dispatch({\n//       type: USER_UPDATE_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     })\n//   }\n// }\n\n\nconst login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n      payload: {\n        name,\n        email,\n        password\n      }\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { login, logout, register, detailsUser, updateUserProfile };","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","detailsUser","user","dispatch","getState","userLogin","userInfo","config","headers","Authorization","token","type","payload","data","get","error","response","message","updateUserProfile","userSignin","put","console","log","localStorage","setItem","JSON","stringify","login","email","password","post","register","name","logout","removeItem"],"sources":["C:/Final year project - Copy - Copy/Final year/charity/frontend/src/actions/userAction.js"],"sourcesContent":["import axios from 'axios'\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_LOGOUT,\r\n  // USER_LIST_FAIL,\r\n  // USER_LIST_REQUEST,\r\n  // USER_LIST_SUCCESS,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  // USER_UPDATE_REQUEST,\r\n  // USER_UPDATE_FAIL,\r\n  // USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstant'\r\n\r\nconst detailsUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application.json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n    dispatch({ type: USER_DETAILS_REQUEST, payload: user })\r\n    const { data } = await axios.get(`/api/users/${user}`, config)\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nconst updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST, payload: user })\r\n\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application.json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n    const { data } = await axios.put(`/api/users/profile`, user, config)\r\n    console.log(data)\r\n    console.log(userInfo)\r\n    dispatch({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data })\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n    localStorage.setItem('user', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n// const updateUser = (user) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({ type: USER_UPDATE_REQUEST, payload: user })\r\n//     const {\r\n//       userSignin: { userInfo },\r\n//     } = getState()\r\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, {\r\n//       headers: { Authorization: `bearer ${userInfo.token}` },\r\n//     })\r\n//     dispatch({ type: USER_UPDATE_SUCCESS, payload: data.user })\r\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data.user })\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: USER_UPDATE_FAIL,\r\n//       payload:\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message,\r\n//     })\r\n//   }\r\n// }\r\n\r\nconst login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST })\r\n    const config = { headers: { 'Content-Type': 'application/json' } }\r\n    const { data } = await axios.post(\r\n      '/api/users/login',\r\n      { email, password },\r\n      config\r\n    )\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nconst register = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n      payload: { name, email, password },\r\n    })\r\n    const config = { headers: { 'Content-Type': 'application/json' } }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users/register',\r\n      { name, email, password },\r\n      config\r\n    )\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data })\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nconst logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo')\r\n  dispatch({ type: USER_LOGOUT })\r\n}\r\nexport { login, logout, register, detailsUser, updateUserProfile }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}