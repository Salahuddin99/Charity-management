{"ast":null,"code":"import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from '../constants/userConstants';\n\nconst update = _ref => {\n  let {\n    userId,\n    name,\n    email,\n    password\n  } = _ref;\n  return async (dispatch, getState) => {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n      payload: {\n        userId,\n        name,\n        email,\n        password\n      }\n    });\n\n    try {\n      const {\n        data\n      } = await Axios.put('/api/users/' + userId, {\n        name,\n        email,\n        password\n      }, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: data\n      });\n      Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload: error.message\n      });\n    }\n  };\n};\n\nconst login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('/api/users/Login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { login, register, logout, update };","map":{"version":3,"names":["Axios","Cookie","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","put","headers","Authorization","token","set","JSON","stringify","error","message","login","config","post","localStorage","setItem","response","register","logout","remove"],"sources":["C:/Final year/charity/frontend/src/actions/userAction.js"],"sourcesContent":["import Axios from 'axios'\r\nimport Cookie from 'js-cookie'\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_LOGOUT,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n} from '../constants/userConstants'\r\n\r\nconst update =\r\n  ({ userId, name, email, password }) =>\r\n  async (dispatch, getState) => {\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState()\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n      payload: { userId, name, email, password },\r\n    })\r\n    try {\r\n      const { data } = await Axios.put(\r\n        '/api/users/' + userId,\r\n        { name, email, password },\r\n        {\r\n          headers: {\r\n            Authorization: 'Bearer ' + userInfo.token,\r\n          },\r\n        }\r\n      )\r\n      dispatch({ type: USER_UPDATE_SUCCESS, payload: data })\r\n      Cookie.set('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({ type: USER_UPDATE_FAIL, payload: error.message })\r\n    }\r\n  }\r\n\r\nconst login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST })\r\n    const config = { headers: { 'Content-Type': 'application/json' } }\r\n    const { data } = await Axios.post(\r\n      '/api/users/Login',\r\n      { email, password },\r\n      config\r\n    )\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nconst register = (name, email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } })\r\n  try {\r\n    const { data } = await Axios.post('/api/users/register', {\r\n      name,\r\n      email,\r\n      password,\r\n    })\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data })\r\n    Cookie.set('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message })\r\n  }\r\n}\r\n\r\nconst logout = () => (dispatch) => {\r\n  Cookie.remove('userInfo')\r\n  dispatch({ type: USER_LOGOUT })\r\n}\r\nexport { login, register, logout, update }\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,qBAJF,EAKEC,qBALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,mBARF,EASEC,mBATF,EAUEC,gBAVF,QAWO,4BAXP;;AAaA,MAAMC,MAAM,GACV;EAAA,IAAC;IAAEC,MAAF;IAAUC,IAAV;IAAgBC,KAAhB;IAAuBC;EAAvB,CAAD;EAAA,OACA,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IAC5B,MAAM;MACJC,UAAU,EAAE;QAAEC;MAAF;IADR,IAEFF,QAAQ,EAFZ;IAGAD,QAAQ,CAAC;MACPI,IAAI,EAAEZ,mBADC;MAEPa,OAAO,EAAE;QAAET,MAAF;QAAUC,IAAV;QAAgBC,KAAhB;QAAuBC;MAAvB;IAFF,CAAD,CAAR;;IAIA,IAAI;MACF,MAAM;QAAEO;MAAF,IAAW,MAAMvB,KAAK,CAACwB,GAAN,CACrB,gBAAgBX,MADK,EAErB;QAAEC,IAAF;QAAQC,KAAR;QAAeC;MAAf,CAFqB,EAGrB;QACES,OAAO,EAAE;UACPC,aAAa,EAAE,YAAYN,QAAQ,CAACO;QAD7B;MADX,CAHqB,CAAvB;MASAV,QAAQ,CAAC;QAAEI,IAAI,EAAEX,mBAAR;QAA6BY,OAAO,EAAEC;MAAtC,CAAD,CAAR;MACAtB,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;IACD,CAZD,CAYE,OAAOQ,KAAP,EAAc;MACdd,QAAQ,CAAC;QAAEI,IAAI,EAAEV,gBAAR;QAA0BW,OAAO,EAAES,KAAK,CAACC;MAAzC,CAAD,CAAR;IACD;EACF,CAxBD;AAAA,CADF;;AA2BA,MAAMC,KAAK,GAAG,CAAClB,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;EACrD,IAAI;IACFA,QAAQ,CAAC;MAAEI,IAAI,EAAEnB;IAAR,CAAD,CAAR;IACA,MAAMgC,MAAM,GAAG;MAAET,OAAO,EAAE;QAAE,gBAAgB;MAAlB;IAAX,CAAf;IACA,MAAM;MAAEF;IAAF,IAAW,MAAMvB,KAAK,CAACmC,IAAN,CACrB,kBADqB,EAErB;MAAEpB,KAAF;MAASC;IAAT,CAFqB,EAGrBkB,MAHqB,CAAvB;IAKAjB,QAAQ,CAAC;MAAEI,IAAI,EAAElB,kBAAR;MAA4BmB,OAAO,EAAEC;IAArC,CAAD,CAAR;IACAa,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;EACD,CAVD,CAUE,OAAOQ,KAAP,EAAc;IACdd,QAAQ,CAAC;MACPI,IAAI,EAAEjB,eADC;MAEPkB,OAAO,EACLS,KAAK,CAACO,QAAN,IAAkBP,KAAK,CAACO,QAAN,CAAef,IAAf,CAAoBS,OAAtC,GACID,KAAK,CAACO,QAAN,CAAef,IAAf,CAAoBS,OADxB,GAEID,KAAK,CAACC;IALL,CAAD,CAAR;EAOD;AACF,CApBD;;AAsBA,MAAMO,QAAQ,GAAG,CAACzB,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;EAC9DA,QAAQ,CAAC;IAAEI,IAAI,EAAEhB,qBAAR;IAA+BiB,OAAO,EAAE;MAAER,IAAF;MAAQC,KAAR;MAAeC;IAAf;EAAxC,CAAD,CAAR;;EACA,IAAI;IACF,MAAM;MAAEO;IAAF,IAAW,MAAMvB,KAAK,CAACmC,IAAN,CAAW,qBAAX,EAAkC;MACvDrB,IADuD;MAEvDC,KAFuD;MAGvDC;IAHuD,CAAlC,CAAvB;IAKAC,QAAQ,CAAC;MAAEI,IAAI,EAAEf,qBAAR;MAA+BgB,OAAO,EAAEC;IAAxC,CAAD,CAAR;IACAtB,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;EACD,CARD,CAQE,OAAOQ,KAAP,EAAc;IACdd,QAAQ,CAAC;MAAEI,IAAI,EAAEd,kBAAR;MAA4Be,OAAO,EAAES,KAAK,CAACC;IAA3C,CAAD,CAAR;EACD;AACF,CAbD;;AAeA,MAAMQ,MAAM,GAAG,MAAOvB,QAAD,IAAc;EACjChB,MAAM,CAACwC,MAAP,CAAc,UAAd;EACAxB,QAAQ,CAAC;IAAEI,IAAI,EAAEb;EAAR,CAAD,CAAR;AACD,CAHD;;AAIA,SAASyB,KAAT,EAAgBM,QAAhB,EAA0BC,MAA1B,EAAkC5B,MAAlC"},"metadata":{},"sourceType":"module"}