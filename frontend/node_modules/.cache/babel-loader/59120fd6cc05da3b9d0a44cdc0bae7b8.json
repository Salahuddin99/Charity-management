{"ast":null,"code":"var _jsxFileName = \"C:\\\\Final year project - Copy - Copy\\\\Final year\\\\charity\\\\frontend\\\\src\\\\screens\\\\ProjectCreateScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Button, Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loading from '../components/Loading';\nimport { createProject } from '../actions/projectAction';\nimport ErrorMessageBox from '../components/ErrorMessagebox'; // import {\n//   PROJECT_UPLOAD_REQUEST,\n//   PROJECT_UPLOAD_SUCCESS,\n//   PROJECT_UPLOAD_FAIL,\n// } from '../constants/projectConstant'\n\nimport { useNavigate } from 'react-router-dom'; // import axios from 'axios'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProjectCreateScreen() {\n  _s();\n\n  const navigate = useNavigate(); // const [uploading, setUploading] = useState(false)\n\n  const [name, setName] = useState(''); // const [category, setCategory] = useState()\n  // const [image, setImage] = useState('')\n  // const [description, setDescription] = useState('')\n  // const [Challenge, setChallenge] = useState('')\n  // const [Solution, setSolution] = useState('')\n  // const [longTermImpact, setLongTermImpact] = useState('')\n  // const [additionalDocumentation, setAdditionalDocumentation] = useState('')\n  // const [by, setBy] = useState('')\n  // const [location, setLocation] = useState('')\n  // const [donationGoal, setDonationGoal] = useState('')\n  // const [companyRegistrationNumber, setCompanyRegistrationNumber] = useState('')\n  // const [companyAddress, setCompanyAddress] = useState('')\n  // const [yearFounded, setYearFounded] = useState('')\n  // const [contactName, setContactName] = useState('')\n  // const [telephoneNo, setTelephoneNo] = useState('')\n  // const [emailAddress, setEmailAddress] = useState('')\n  // const [country, setCountry] = useState('')\n\n  const dispatch = useDispatch();\n  const projectCreate = useSelector(state => state.projectCreate);\n  const {\n    success,\n    loading,\n    error\n  } = projectCreate;\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(createProject(name // category,\n    // image,\n    // description,\n    // Challenge,\n    // Solution,\n    // longTermImpact,\n    // additionalDocumentation,\n    // by,\n    // location,\n    // donationGoal,\n    // companyRegistrationNumber,\n    // companyAddress,\n    // yearFounded,\n    // contactName,\n    // telephoneNo,\n    // emailAddress,\n    // country,\n    ));\n  }; // const uploadFileHandler = async (e) => {\n  //   const file = e.target.files[0]\n  //   const bodyformData = new FormData()\n  //   bodyformData.append('file', file)\n  //   setUploading(true)\n  //   try {\n  //     dispatch({ type: PROJECT_UPLOAD_REQUEST })\n  //     const { data } = await axios.post('/api/upload', bodyformData, {\n  //       headers: {\n  //         'Content-Type': 'multipart/form-data',\n  //       },\n  //     })\n  //     dispatch({ type: PROJECT_UPLOAD_SUCCESS })\n  //     setImage(data.secure_url)\n  //     setUploading(false)\n  //   } catch (error) {\n  //     dispatch({ type: PROJECT_UPLOAD_FAIL })\n  //     console.error(error)\n  //     setUploading(false)\n  //   }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), success && /*#__PURE__*/_jsxDEV(ErrorMessageBox, {\n      variant: \"danger\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessageBox, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Project Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter Project Name\" //value={name}\n          ,\n          required: true,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"light\",\n        type: \"button\",\n        onClick: () => navigate('/adminDashboard'),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProjectCreateScreen, \"J21j+nfZoY5VTEXEkfIB5QQ4PyQ=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n\n_c = ProjectCreateScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectCreateScreen\");","map":{"version":3,"names":["React","useState","Form","Button","Container","useDispatch","useSelector","Loading","createProject","ErrorMessageBox","useNavigate","ProjectCreateScreen","navigate","name","setName","dispatch","projectCreate","state","success","loading","error","submitHandler","e","preventDefault","target","value"],"sources":["C:/Final year project - Copy - Copy/Final year/charity/frontend/src/screens/ProjectCreateScreen.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Form, Button, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loading from '../components/Loading'\r\nimport { createProject } from '../actions/projectAction'\r\nimport ErrorMessageBox from '../components/ErrorMessagebox'\r\n// import {\r\n//   PROJECT_UPLOAD_REQUEST,\r\n//   PROJECT_UPLOAD_SUCCESS,\r\n//   PROJECT_UPLOAD_FAIL,\r\n// } from '../constants/projectConstant'\r\nimport { useNavigate } from 'react-router-dom'\r\n// import axios from 'axios'\r\n\r\nexport default function ProjectCreateScreen() {\r\n  const navigate = useNavigate()\r\n  // const [uploading, setUploading] = useState(false)\r\n  const [name, setName] = useState('')\r\n  // const [category, setCategory] = useState()\r\n  // const [image, setImage] = useState('')\r\n  // const [description, setDescription] = useState('')\r\n  // const [Challenge, setChallenge] = useState('')\r\n  // const [Solution, setSolution] = useState('')\r\n  // const [longTermImpact, setLongTermImpact] = useState('')\r\n  // const [additionalDocumentation, setAdditionalDocumentation] = useState('')\r\n  // const [by, setBy] = useState('')\r\n  // const [location, setLocation] = useState('')\r\n  // const [donationGoal, setDonationGoal] = useState('')\r\n  // const [companyRegistrationNumber, setCompanyRegistrationNumber] = useState('')\r\n  // const [companyAddress, setCompanyAddress] = useState('')\r\n  // const [yearFounded, setYearFounded] = useState('')\r\n  // const [contactName, setContactName] = useState('')\r\n  // const [telephoneNo, setTelephoneNo] = useState('')\r\n  // const [emailAddress, setEmailAddress] = useState('')\r\n  // const [country, setCountry] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const projectCreate = useSelector((state) => state.projectCreate)\r\n  const { success, loading, error } = projectCreate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      createProject(\r\n        name\r\n        // category,\r\n        // image,\r\n        // description,\r\n        // Challenge,\r\n        // Solution,\r\n        // longTermImpact,\r\n        // additionalDocumentation,\r\n        // by,\r\n        // location,\r\n        // donationGoal,\r\n        // companyRegistrationNumber,\r\n        // companyAddress,\r\n        // yearFounded,\r\n        // contactName,\r\n        // telephoneNo,\r\n        // emailAddress,\r\n        // country,\r\n      )\r\n    )\r\n  }\r\n\r\n  // const uploadFileHandler = async (e) => {\r\n  //   const file = e.target.files[0]\r\n  //   const bodyformData = new FormData()\r\n  //   bodyformData.append('file', file)\r\n  //   setUploading(true)\r\n  //   try {\r\n  //     dispatch({ type: PROJECT_UPLOAD_REQUEST })\r\n  //     const { data } = await axios.post('/api/upload', bodyformData, {\r\n  //       headers: {\r\n  //         'Content-Type': 'multipart/form-data',\r\n  //       },\r\n  //     })\r\n  //     dispatch({ type: PROJECT_UPLOAD_SUCCESS })\r\n  //     setImage(data.secure_url)\r\n  //     setUploading(false)\r\n  //   } catch (error) {\r\n  //     dispatch({ type: PROJECT_UPLOAD_FAIL })\r\n  //     console.error(error)\r\n  //     setUploading(false)\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Create Project</h1>\r\n      {success && <ErrorMessageBox variant=\"danger\">{success}</ErrorMessageBox>}\r\n      {error && <ErrorMessageBox variant=\"danger\">{error}</ErrorMessageBox>}\r\n      {loading && <Loading />}\r\n\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId=\"name\">\r\n          <Form.Label>Project Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Project Name\"\r\n            //value={name}\r\n            required\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        {/* <Form.Group controlId=\"charity category\">\r\n          <Form.Label>Charity category</Form.Label>\r\n          <Form.Select\r\n            aria-label=\"Default select example\"\r\n            value={category}\r\n            required\r\n            onChange={(e) => setCategory(e.target.value)}\r\n          >\r\n            <option>Open this select menu</option>\r\n            <option value=\"1\">Stuff charity</option>\r\n            <option value=\"2\">Food charity</option>\r\n            <option value=\"3\">Fund raise</option>\r\n            <option value=\"3\">Education charity</option>\r\n          </Form.Select>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Group controlId=\"image\">\r\n            <Form.Label>Image</Form.Label>\r\n            <fieldset disabled>\r\n              <Form.Control\r\n                placeholder=\"choose image below\"\r\n                value={image}\r\n                required\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n            </fieldset>\r\n\r\n            <Form.Group controlId=\"imageFile\">\r\n              <Form.Label>Upload Image</Form.Label>\r\n              <Form.Control\r\n                type=\"file\"\r\n                onChange={uploadFileHandler}\r\n              ></Form.Control>\r\n              {uploading && <Loading />}\r\n            </Form.Group>\r\n          </Form.Group>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Donation Goal\">\r\n          <Form.Label>Donation Goal</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            min=\"100\"\r\n            placeholder=\"minimum $100\"\r\n            value={donationGoal}\r\n            required\r\n            onChange={(e) => setDonationGoal(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Location\">\r\n          <Form.Label>Project Location</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter project location take place\"\r\n            value={location}\r\n            required\r\n            onChange={(e) => setLocation(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"description\">\r\n          <Form.Label>Project Description</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            placeholder=\"Enter project description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Challenge\">\r\n          <Form.Label>Project Challenge</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            placeholder=\"Enter project Challenge\"\r\n            value={Challenge}\r\n            onChange={(e) => setChallenge(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Solution\">\r\n          <Form.Label>project Solution</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            placeholder=\"Enter project Solution\"\r\n            value={Solution}\r\n            onChange={(e) => setSolution(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Project long term impact\">\r\n          <Form.Label>Project long term impact</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            placeholder=\"Enter project long term impact\"\r\n            value={longTermImpact}\r\n            onChange={(e) => setLongTermImpact(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formFile\">\r\n          <Form.Label>Project additional Documentation</Form.Label>\r\n          <Form.Control\r\n            type=\"file\"\r\n            placeholder=\"additional Documentation\"\r\n            value={additionalDocumentation}\r\n            onChange={(e) => setAdditionalDocumentation(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Name of organization\">\r\n          <Form.Label>Name of organization</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter the name of your organization\"\r\n            value={by}\r\n            required\r\n            onChange={(e) => setBy(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Company Registration Number\">\r\n          <Form.Label>Company Registration Number</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Enter your Company Registration Number etc: 2019 xx xxxx\"\r\n            value={companyRegistrationNumber}\r\n            required\r\n            onChange={(e) => setCompanyRegistrationNumber(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"Company Address\">\r\n          <Form.Label>Company Address</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Company Address\"\r\n            value={companyAddress}\r\n            onChange={(e) => setCompanyAddress(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"yearFounded\">\r\n          <Form.Label>Company year founded</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Enter your Company year founded\"\r\n            value={yearFounded}\r\n            required\r\n            onChange={(e) => setYearFounded(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"contactName\">\r\n          <Form.Label>Company contact Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Company contact Name\"\r\n            value={contactName}\r\n            onChange={(e) => setContactName(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"telephoneNo\">\r\n          <Form.Label>company contact Number</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Enter your company contact Number\"\r\n            value={telephoneNo}\r\n            required\r\n            onChange={(e) => setTelephoneNo(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"emailAddress\">\r\n          <Form.Label>Company Email Address</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Company Email Address\"\r\n            value={emailAddress}\r\n            onChange={(e) => setEmailAddress(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"country\">\r\n          <Form.Label>Company country from</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Company contact Name\"\r\n            value={country}\r\n            onChange={(e) => setCountry(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group> */}\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Create\r\n        </Button>{' '}\r\n        <Button\r\n          variant=\"light\"\r\n          type=\"button\"\r\n          onClick={() => navigate('/adminDashboard')}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}